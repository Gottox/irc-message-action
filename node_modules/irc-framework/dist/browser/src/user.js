'use strict';

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.set");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports =
/*#__PURE__*/
function () {
  function User(opts) {
    _classCallCheck(this, User);

    opts = opts || {};
    this.nick = opts.nick || '';
    this.username = opts.username || '';
    this.gecos = opts.gecos || '';
    this.host = opts.host || '';
    this.away = !!opts.away;
    this.modes = new Set(opts.modes || []);
  }

  _createClass(User, [{
    key: "toggleModes",
    value: function toggleModes(modestr) {
      var adding = true;
      var i;

      for (i in modestr) {
        switch (modestr[i]) {
          case '+':
            adding = true;
            break;

          case '-':
            adding = false;
            break;

          default:
            this.modes[adding ? 'add' : 'delete'](modestr[i]);
        }
      }
    }
  }]);

  return User;
}();