"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

require("core-js/modules/es.array.index-of.js");

require("core-js/modules/es.date.to-string.js");

require("core-js/modules/es.object.to-string.js");

require("core-js/modules/es.regexp.to-string.js");

require("core-js/modules/es.reflect.construct.js");

require("core-js/modules/es.function.bind.js");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.map.js");

require("core-js/modules/es.string.iterator.js");

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.object.create.js");

require("core-js/modules/es.object.define-property.js");

require("core-js/modules/es.array.slice.js");

require("core-js/modules/es.array.from.js");

require("core-js/modules/es.symbol.js");

require("core-js/modules/es.symbol.description.js");

require("core-js/modules/es.symbol.iterator.js");

require("core-js/modules/es.array.is-array.js");

require("regenerator-runtime/runtime.js");

require("core-js/modules/es.function.name.js");

require("core-js/modules/es.object.set-prototype-of.js");

require("core-js/modules/es.object.get-prototype-of.js");

require("core-js/modules/es.array.concat.js");

require("core-js/modules/es.regexp.exec.js");

var _marked = /*#__PURE__*/regeneratorRuntime.mark(lineBreak),
    _marked2 = /*#__PURE__*/regeneratorRuntime.mark(wordBreak);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GraphemeSplitter = require('grapheme-splitter');

var _require = require('isomorphic-textencoder'),
    encodeUTF8 = _require.encode;

var graphemeSplitter = new GraphemeSplitter();
/* abstract */

var SubstringTooLargeForLineError = /*#__PURE__*/function (_Error) {
  _inherits(SubstringTooLargeForLineError, _Error);

  var _super = _createSuper(SubstringTooLargeForLineError);

  /* substring: string */

  /* opts: Options */
  function SubstringTooLargeForLineError(substring
  /* : string */
  , opts
  /* : Options */
  ) {
    var _this;

    _classCallCheck(this, SubstringTooLargeForLineError);

    _this = _super.call(this); // Maintains proper stack trace for where our error was thrown (only available on V8)
    // @ts-ignore

    if (Error.captureStackTrace) {
      // @ts-ignore
      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    } // Custom debugging information


    _this.substring = substring;
    _this.opts = opts;
    return _this;
  }

  _createClass(SubstringTooLargeForLineError, [{
    key: "name",
    get: function get() {
      return this.constructor.name;
    }
  }]);

  return SubstringTooLargeForLineError;
}( /*#__PURE__*/_wrapNativeSuper(Error));

var WordTooLargeForLineError = /*#__PURE__*/function (_SubstringTooLargeFor) {
  _inherits(WordTooLargeForLineError, _SubstringTooLargeFor);

  var _super2 = _createSuper(WordTooLargeForLineError);

  function WordTooLargeForLineError() {
    _classCallCheck(this, WordTooLargeForLineError);

    return _super2.apply(this, arguments);
  }

  _createClass(WordTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte word can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);

  return WordTooLargeForLineError;
}(SubstringTooLargeForLineError);

var GraphemeTooLargeForLineError = /*#__PURE__*/function (_SubstringTooLargeFor2) {
  _inherits(GraphemeTooLargeForLineError, _SubstringTooLargeFor2);

  var _super3 = _createSuper(GraphemeTooLargeForLineError);

  function GraphemeTooLargeForLineError() {
    _classCallCheck(this, GraphemeTooLargeForLineError);

    return _super3.apply(this, arguments);
  }

  _createClass(GraphemeTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte grapheme can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);

  return GraphemeTooLargeForLineError;
}(SubstringTooLargeForLineError);

var CodepointTooLargeForLineError = /*#__PURE__*/function (_SubstringTooLargeFor3) {
  _inherits(CodepointTooLargeForLineError, _SubstringTooLargeFor3);

  var _super4 = _createSuper(CodepointTooLargeForLineError);

  function CodepointTooLargeForLineError() {
    _classCallCheck(this, CodepointTooLargeForLineError);

    return _super4.apply(this, arguments);
  }

  _createClass(CodepointTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte codepoint can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);

  return CodepointTooLargeForLineError;
}(SubstringTooLargeForLineError);

function size(str
/* : string */
)
/* : number */
{
  var byteArray = encodeUTF8(str);
  var bytes = byteArray.byteLength;
  return bytes;
}
/* export interface Options {
    bytes: number,
    allowBreakingWords?: boolean,
    allowBreakingGraphemes?: boolean,
} */


function lineBreak(str
/* : string */
, opts
/* : Options */
) {
  var line, previousWhitespace, _iterator, _step, _step$value, word, trailingWhitespace, wordPreviousWhitespace, _iterator2, _step2, grapheme, _iterator3, _step3, codepoint;

  return regeneratorRuntime.wrap(function lineBreak$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          line = '';
          previousWhitespace = '';
          _iterator = _createForOfIteratorHelper(wordBreak(str));
          _context.prev = 3;

          _iterator.s();

        case 5:
          if ((_step = _iterator.n()).done) {
            _context.next = 79;
            break;
          }

          _step$value = _slicedToArray(_step.value, 2), word = _step$value[0], trailingWhitespace = _step$value[1];

          if (!(size(line) + size(previousWhitespace) + size(word) <= opts.bytes)) {
            _context.next = 11;
            break;
          }

          line += previousWhitespace + word;
          previousWhitespace = trailingWhitespace;
          return _context.abrupt("continue", 77);

        case 11:
          if (!(size(word) <= opts.bytes)) {
            _context.next = 18;
            break;
          }

          if (!line) {
            _context.next = 15;
            break;
          }

          _context.next = 15;
          return line;

        case 15:
          // previously buffered whitespace is discarded as it was replaced by a line break
          // store new whitespace for later
          previousWhitespace = trailingWhitespace;
          line = word; // next line starts with word

          return _context.abrupt("continue", 77);

        case 18:
          if (opts.allowBreakingWords) {
            _context.next = 20;
            break;
          }

          throw new WordTooLargeForLineError(word, opts);

        case 20:
          // try to fit part of word into current line
          wordPreviousWhitespace = trailingWhitespace;
          _iterator2 = _createForOfIteratorHelper(graphemeSplitter.iterateGraphemes(word));
          _context.prev = 22;

          _iterator2.s();

        case 24:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 68;
            break;
          }

          grapheme = _step2.value;

          if (!(size(line) + size(previousWhitespace) + size(grapheme) <= opts.bytes)) {
            _context.next = 30;
            break;
          }

          line += previousWhitespace + grapheme;
          previousWhitespace = '';
          return _context.abrupt("continue", 66);

        case 30:
          if (!(size(grapheme) <= opts.bytes)) {
            _context.next = 37;
            break;
          }

          if (!line) {
            _context.next = 34;
            break;
          }

          _context.next = 34;
          return line;

        case 34:
          previousWhitespace = '';
          line = grapheme;
          return _context.abrupt("continue", 66);

        case 37:
          if (opts.allowBreakingGraphemes) {
            _context.next = 39;
            break;
          }

          throw new GraphemeTooLargeForLineError(grapheme, opts);

        case 39:
          // break grapheme into codepoints instead
          _iterator3 = _createForOfIteratorHelper(grapheme);
          _context.prev = 40;

          _iterator3.s();

        case 42:
          if ((_step3 = _iterator3.n()).done) {
            _context.next = 58;
            break;
          }

          codepoint = _step3.value;

          if (!(size(line) + size(previousWhitespace) + size(codepoint) <= opts.bytes)) {
            _context.next = 48;
            break;
          }

          line += previousWhitespace + codepoint;
          previousWhitespace = '';
          return _context.abrupt("continue", 56);

        case 48:
          if (!(size(codepoint) <= opts.bytes)) {
            _context.next = 55;
            break;
          }

          if (!line) {
            _context.next = 52;
            break;
          }

          _context.next = 52;
          return line;

        case 52:
          previousWhitespace = '';
          line = codepoint;
          return _context.abrupt("continue", 56);

        case 55:
          throw new CodepointTooLargeForLineError(codepoint, opts);

        case 56:
          _context.next = 42;
          break;

        case 58:
          _context.next = 63;
          break;

        case 60:
          _context.prev = 60;
          _context.t0 = _context["catch"](40);

          _iterator3.e(_context.t0);

        case 63:
          _context.prev = 63;

          _iterator3.f();

          return _context.finish(63);

        case 66:
          _context.next = 24;
          break;

        case 68:
          _context.next = 73;
          break;

        case 70:
          _context.prev = 70;
          _context.t1 = _context["catch"](22);

          _iterator2.e(_context.t1);

        case 73:
          _context.prev = 73;

          _iterator2.f();

          return _context.finish(73);

        case 76:
          // end of grapheme loop
          previousWhitespace = wordPreviousWhitespace;

        case 77:
          _context.next = 5;
          break;

        case 79:
          _context.next = 84;
          break;

        case 81:
          _context.prev = 81;
          _context.t2 = _context["catch"](3);

          _iterator.e(_context.t2);

        case 84:
          _context.prev = 84;

          _iterator.f();

          return _context.finish(84);

        case 87:
          // end of [word, trailingWhitespace] loop
          // unyielded leftovers when we're done iterating over the input string
          if (previousWhitespace) {
            if (size(line) + size(previousWhitespace) <= opts.bytes) {
              line += previousWhitespace; // retain trailing whitespace on input line if possible
            }
          }

          if (!line) {
            _context.next = 91;
            break;
          }

          _context.next = 91;
          return line;

        case 91:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[3, 81, 84, 87], [22, 70, 73, 76], [40, 60, 63, 66]]);
} // yields [word, trailingWhitespace] tuples


function wordBreak(str
/* : string */
) {
  var word, trailingWhitespace, _iterator4, _step4, grapheme;

  return regeneratorRuntime.wrap(function wordBreak$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          word = '';
          trailingWhitespace = '';
          _iterator4 = _createForOfIteratorHelper(graphemeSplitter.iterateGraphemes(str));
          _context2.prev = 3;

          _iterator4.s();

        case 5:
          if ((_step4 = _iterator4.n()).done) {
            _context2.next = 19;
            break;
          }

          grapheme = _step4.value;

          if (!/^\s+$/.test(grapheme)) {
            _context2.next = 10;
            break;
          }

          // collect whitespace
          trailingWhitespace += grapheme;
          return _context2.abrupt("continue", 17);

        case 10:
          if (!trailingWhitespace) {
            _context2.next = 16;
            break;
          }

          _context2.next = 13;
          return [word, trailingWhitespace];

        case 13:
          word = grapheme;
          trailingWhitespace = '';
          return _context2.abrupt("continue", 17);

        case 16:
          // continuation of word
          word += grapheme;

        case 17:
          _context2.next = 5;
          break;

        case 19:
          _context2.next = 24;
          break;

        case 21:
          _context2.prev = 21;
          _context2.t0 = _context2["catch"](3);

          _iterator4.e(_context2.t0);

        case 24:
          _context2.prev = 24;

          _iterator4.f();

          return _context2.finish(24);

        case 27:
          if (!word) {
            _context2.next = 30;
            break;
          }

          _context2.next = 30;
          return [word, trailingWhitespace];

        case 30:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, null, [[3, 21, 24, 27]]);
}

module.exports = {
  WordTooLargeForLineError: WordTooLargeForLineError,
  GraphemeTooLargeForLineError: GraphemeTooLargeForLineError,
  CodepointTooLargeForLineError: CodepointTooLargeForLineError,
  lineBreak: lineBreak,
  wordBreak: wordBreak
};