"use strict";

require("core-js/modules/es.symbol");

require("core-js/modules/es.symbol.description");

require("core-js/modules/es.symbol.iterator");

require("core-js/modules/es.array.concat");

require("core-js/modules/es.array.index-of");

require("core-js/modules/es.array.is-array");

require("core-js/modules/es.array.iterator");

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.function.bind");

require("core-js/modules/es.function.name");

require("core-js/modules/es.map");

require("core-js/modules/es.object.create");

require("core-js/modules/es.object.define-property");

require("core-js/modules/es.object.get-prototype-of");

require("core-js/modules/es.object.set-prototype-of");

require("core-js/modules/es.object.to-string");

require("core-js/modules/es.reflect.construct");

require("core-js/modules/es.regexp.to-string");

require("core-js/modules/es.string.iterator");

require("core-js/modules/web.dom-collections.iterator");

require("regenerator-runtime/runtime");

var _marked =
/*#__PURE__*/
regeneratorRuntime.mark(lineBreak),
    _marked2 =
/*#__PURE__*/
regeneratorRuntime.mark(wordBreak);

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GraphemeSplitter = require('grapheme-splitter');

var _require = require('isomorphic-textencoder'),
    encodeUTF8 = _require.encode;

var graphemeSplitter = new GraphemeSplitter();
/* abstract */

var SubstringTooLargeForLineError =
/*#__PURE__*/
function (_Error) {
  _inherits(SubstringTooLargeForLineError, _Error);

  /* substring: string */

  /* opts: Options */
  function SubstringTooLargeForLineError(substring
  /* : string */
  , opts
  /* : Options */
  ) {
    var _this;

    _classCallCheck(this, SubstringTooLargeForLineError);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SubstringTooLargeForLineError).call(this)); // Maintains proper stack trace for where our error was thrown (only available on V8)
    // @ts-ignore

    if (Error.captureStackTrace) {
      // @ts-ignore
      Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);
    } // Custom debugging information


    _this.substring = substring;
    _this.opts = opts;
    return _this;
  }

  _createClass(SubstringTooLargeForLineError, [{
    key: "name",
    get: function get() {
      return this.constructor.name;
    }
  }]);

  return SubstringTooLargeForLineError;
}(_wrapNativeSuper(Error));

var WordTooLargeForLineError =
/*#__PURE__*/
function (_SubstringTooLargeFor) {
  _inherits(WordTooLargeForLineError, _SubstringTooLargeFor);

  function WordTooLargeForLineError() {
    _classCallCheck(this, WordTooLargeForLineError);

    return _possibleConstructorReturn(this, _getPrototypeOf(WordTooLargeForLineError).apply(this, arguments));
  }

  _createClass(WordTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte word can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);

  return WordTooLargeForLineError;
}(SubstringTooLargeForLineError);

var GraphemeTooLargeForLineError =
/*#__PURE__*/
function (_SubstringTooLargeFor2) {
  _inherits(GraphemeTooLargeForLineError, _SubstringTooLargeFor2);

  function GraphemeTooLargeForLineError() {
    _classCallCheck(this, GraphemeTooLargeForLineError);

    return _possibleConstructorReturn(this, _getPrototypeOf(GraphemeTooLargeForLineError).apply(this, arguments));
  }

  _createClass(GraphemeTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte grapheme can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);

  return GraphemeTooLargeForLineError;
}(SubstringTooLargeForLineError);

var CodepointTooLargeForLineError =
/*#__PURE__*/
function (_SubstringTooLargeFor3) {
  _inherits(CodepointTooLargeForLineError, _SubstringTooLargeFor3);

  function CodepointTooLargeForLineError() {
    _classCallCheck(this, CodepointTooLargeForLineError);

    return _possibleConstructorReturn(this, _getPrototypeOf(CodepointTooLargeForLineError).apply(this, arguments));
  }

  _createClass(CodepointTooLargeForLineError, [{
    key: "message",
    get: function get() {
      return "".concat(size(this.substring), " byte codepoint can't fit in a ").concat(this.opts.bytes, " byte block: ").concat(this.substring);
    }
  }]);

  return CodepointTooLargeForLineError;
}(SubstringTooLargeForLineError);

function size(str
/* : string */
)
/* : number */
{
  var byteArray = encodeUTF8(str);
  var bytes = byteArray.byteLength;
  return bytes;
}
/* export interface Options {
	bytes: number,
	allowBreakingWords?: boolean,
	allowBreakingGraphemes?: boolean,
} */


function lineBreak(str
/* : string */
, opts
/* : Options */
) {
  var line, previousWhitespace, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, word, trailingWhitespace, wordPreviousWhitespace, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, grapheme, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, codepoint;

  return regeneratorRuntime.wrap(function lineBreak$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          line = '';
          previousWhitespace = '';
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          _context.prev = 5;
          _iterator = wordBreak(str)[Symbol.iterator]();

        case 7:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            _context.next = 100;
            break;
          }

          _step$value = _slicedToArray(_step.value, 2), word = _step$value[0], trailingWhitespace = _step$value[1];

          if (!(size(line) + size(previousWhitespace) + size(word) <= opts.bytes)) {
            _context.next = 13;
            break;
          }

          line += previousWhitespace + word;
          previousWhitespace = trailingWhitespace;
          return _context.abrupt("continue", 97);

        case 13:
          if (!(size(word) <= opts.bytes)) {
            _context.next = 20;
            break;
          }

          if (!line) {
            _context.next = 17;
            break;
          }

          _context.next = 17;
          return line;

        case 17:
          // previously buffered whitespace is discarded as it was replaced by a line break
          // store new whitespace for later
          previousWhitespace = trailingWhitespace;
          line = word; // next line starts with word

          return _context.abrupt("continue", 97);

        case 20:
          if (opts.allowBreakingWords) {
            _context.next = 22;
            break;
          }

          throw new WordTooLargeForLineError(word, opts);

        case 22:
          // try to fit part of word into current line
          wordPreviousWhitespace = trailingWhitespace;
          _iteratorNormalCompletion2 = true;
          _didIteratorError2 = false;
          _iteratorError2 = undefined;
          _context.prev = 26;
          _iterator2 = graphemeSplitter.iterateGraphemes(word)[Symbol.iterator]();

        case 28:
          if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
            _context.next = 82;
            break;
          }

          grapheme = _step2.value;

          if (!(size(line) + size(previousWhitespace) + size(grapheme) <= opts.bytes)) {
            _context.next = 34;
            break;
          }

          line += previousWhitespace + grapheme;
          previousWhitespace = '';
          return _context.abrupt("continue", 79);

        case 34:
          if (!(size(grapheme) <= opts.bytes)) {
            _context.next = 41;
            break;
          }

          if (!line) {
            _context.next = 38;
            break;
          }

          _context.next = 38;
          return line;

        case 38:
          previousWhitespace = '';
          line = grapheme;
          return _context.abrupt("continue", 79);

        case 41:
          if (opts.allowBreakingGraphemes) {
            _context.next = 43;
            break;
          }

          throw new GraphemeTooLargeForLineError(grapheme, opts);

        case 43:
          // break grapheme into codepoints instead
          _iteratorNormalCompletion3 = true;
          _didIteratorError3 = false;
          _iteratorError3 = undefined;
          _context.prev = 46;
          _iterator3 = grapheme[Symbol.iterator]();

        case 48:
          if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
            _context.next = 65;
            break;
          }

          codepoint = _step3.value;

          if (!(size(line) + size(previousWhitespace) + size(codepoint) <= opts.bytes)) {
            _context.next = 54;
            break;
          }

          line += previousWhitespace + codepoint;
          previousWhitespace = '';
          return _context.abrupt("continue", 62);

        case 54:
          if (!(size(codepoint) <= opts.bytes)) {
            _context.next = 61;
            break;
          }

          if (!line) {
            _context.next = 58;
            break;
          }

          _context.next = 58;
          return line;

        case 58:
          previousWhitespace = '';
          line = codepoint;
          return _context.abrupt("continue", 62);

        case 61:
          throw new CodepointTooLargeForLineError(codepoint, opts);

        case 62:
          _iteratorNormalCompletion3 = true;
          _context.next = 48;
          break;

        case 65:
          _context.next = 71;
          break;

        case 67:
          _context.prev = 67;
          _context.t0 = _context["catch"](46);
          _didIteratorError3 = true;
          _iteratorError3 = _context.t0;

        case 71:
          _context.prev = 71;
          _context.prev = 72;

          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }

        case 74:
          _context.prev = 74;

          if (!_didIteratorError3) {
            _context.next = 77;
            break;
          }

          throw _iteratorError3;

        case 77:
          return _context.finish(74);

        case 78:
          return _context.finish(71);

        case 79:
          _iteratorNormalCompletion2 = true;
          _context.next = 28;
          break;

        case 82:
          _context.next = 88;
          break;

        case 84:
          _context.prev = 84;
          _context.t1 = _context["catch"](26);
          _didIteratorError2 = true;
          _iteratorError2 = _context.t1;

        case 88:
          _context.prev = 88;
          _context.prev = 89;

          if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
            _iterator2["return"]();
          }

        case 91:
          _context.prev = 91;

          if (!_didIteratorError2) {
            _context.next = 94;
            break;
          }

          throw _iteratorError2;

        case 94:
          return _context.finish(91);

        case 95:
          return _context.finish(88);

        case 96:
          // end of grapheme loop
          previousWhitespace = wordPreviousWhitespace;

        case 97:
          _iteratorNormalCompletion = true;
          _context.next = 7;
          break;

        case 100:
          _context.next = 106;
          break;

        case 102:
          _context.prev = 102;
          _context.t2 = _context["catch"](5);
          _didIteratorError = true;
          _iteratorError = _context.t2;

        case 106:
          _context.prev = 106;
          _context.prev = 107;

          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }

        case 109:
          _context.prev = 109;

          if (!_didIteratorError) {
            _context.next = 112;
            break;
          }

          throw _iteratorError;

        case 112:
          return _context.finish(109);

        case 113:
          return _context.finish(106);

        case 114:
          // end of [word, trailingWhitespace] loop
          // unyielded leftovers when we're done iterating over the input string
          if (previousWhitespace) {
            if (size(line) + size(previousWhitespace) <= opts.bytes) {
              line += previousWhitespace; // retain trailing whitespace on input line if possible
            }
          }

          if (!line) {
            _context.next = 118;
            break;
          }

          _context.next = 118;
          return line;

        case 118:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, null, [[5, 102, 106, 114], [26, 84, 88, 96], [46, 67, 71, 79], [72,, 74, 78], [89,, 91, 95], [107,, 109, 113]]);
} // yields [word, trailingWhitespace] tuples


function wordBreak(str
/* : string */
) {
  var word, trailingWhitespace, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, grapheme;

  return regeneratorRuntime.wrap(function wordBreak$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          word = '';
          trailingWhitespace = '';
          _iteratorNormalCompletion4 = true;
          _didIteratorError4 = false;
          _iteratorError4 = undefined;
          _context2.prev = 5;
          _iterator4 = graphemeSplitter.iterateGraphemes(str)[Symbol.iterator]();

        case 7:
          if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
            _context2.next = 22;
            break;
          }

          grapheme = _step4.value;

          if (!/^\s+$/.test(grapheme)) {
            _context2.next = 12;
            break;
          }

          // collect whitespace
          trailingWhitespace += grapheme;
          return _context2.abrupt("continue", 19);

        case 12:
          if (!trailingWhitespace) {
            _context2.next = 18;
            break;
          }

          _context2.next = 15;
          return [word, trailingWhitespace];

        case 15:
          word = grapheme;
          trailingWhitespace = '';
          return _context2.abrupt("continue", 19);

        case 18:
          // continuation of word
          word += grapheme;

        case 19:
          _iteratorNormalCompletion4 = true;
          _context2.next = 7;
          break;

        case 22:
          _context2.next = 28;
          break;

        case 24:
          _context2.prev = 24;
          _context2.t0 = _context2["catch"](5);
          _didIteratorError4 = true;
          _iteratorError4 = _context2.t0;

        case 28:
          _context2.prev = 28;
          _context2.prev = 29;

          if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
            _iterator4["return"]();
          }

        case 31:
          _context2.prev = 31;

          if (!_didIteratorError4) {
            _context2.next = 34;
            break;
          }

          throw _iteratorError4;

        case 34:
          return _context2.finish(31);

        case 35:
          return _context2.finish(28);

        case 36:
          if (!word) {
            _context2.next = 39;
            break;
          }

          _context2.next = 39;
          return [word, trailingWhitespace];

        case 39:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, null, [[5, 24, 28, 36], [29,, 31, 35]]);
}

module.exports = {
  WordTooLargeForLineError: WordTooLargeForLineError,
  GraphemeTooLargeForLineError: GraphemeTooLargeForLineError,
  CodepointTooLargeForLineError: CodepointTooLargeForLineError,
  lineBreak: lineBreak,
  wordBreak: wordBreak
};