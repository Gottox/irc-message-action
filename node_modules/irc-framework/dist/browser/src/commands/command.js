'use strict';

require("core-js/modules/es.date.to-string");

require("core-js/modules/es.object.define-property");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _ = {
  clone: require('lodash/clone')
};
var numberRegex = /^[0-9.]{1,}$/;

module.exports =
/*#__PURE__*/
function () {
  function IrcCommand(command, data) {
    _classCallCheck(this, IrcCommand);

    this.command = command += '';
    this.params = _.clone(data.params);
    this.tags = _.clone(data.tags);
    this.prefix = data.prefix;
    this.nick = data.nick;
    this.ident = data.ident;
    this.hostname = data.hostname;
  }

  _createClass(IrcCommand, [{
    key: "getTag",
    value: function getTag(tag_name) {
      return this.tags[tag_name.toLowerCase()];
    }
  }, {
    key: "getServerTime",
    value: function getServerTime() {
      var timeTag = this.getTag('time');
      var time; // Explicitly return undefined if theres no time
      // or the value is an empty string

      if (!timeTag) {
        return time;
      } // If parsing fails for some odd reason, also fallback to
      // undefined, instead of returning NaN


      time = Date.parse(timeTag) || undefined; // Support for znc.in/server-time unix timestamps

      if (!time && numberRegex.test(timeTag)) {
        return new Date(timeTag * 1000).getTime();
      }

      return time;
    }
  }]);

  return IrcCommand;
}();